# This workflow publishes build artifacts
# For the Monitor backend and the migrations bundles
# These can then be deployed, or turned into a release
name: Publish Monitor

on:
  workflow_dispatch:
    inputs:
      build-config:
        description: Build Configuration
        required: true
        default: release
  push:
    branches:
      - main
      - feat/142368/configure-pipelines

env:
  CI_app-project: ./app/Monitor/Monitor.csproj
  CI_dotnet-version: 8.x
  CI_build-config: ${{ github.event.inputs.build-config || 'release' }}
  CI_publish-dir: publish

  CI_migration-output-filename: migrate-monitor-db
  CI_dotnet-output: monitor

  CI_node-version: 20
  CI_client-package: "frontend-webapp"

  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true

jobs:
  # Any initialisation other jobs depend on?
  # e.g. getting the version number and putting in an output for easier use
  init:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}
      short-sha: ${{ steps.sha.outputs.sha }}

    steps:
      - uses: actions/checkout@v3

      # short git sha for use in versions
      - name: Get short SHA
        id: sha
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # get app version from csproj
      - name: Read version
        id: version
        uses: bbonkr/get-version-action@v1
        with:
          project: ${{ env.CI_app-project }}

  # publish the frontend webapp
  publish-frontend-webapp:
    needs: [init]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: npm/action-setup@v2.0.1
        with:
          version: 6.30.0
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.CI_node-version }}
          cache: npm

      - run: npm i --frozen-lockfile --filter ${{ env.CI_client-package }}

      - run: npm --filter ${{ env.CI_client-package }} build

      # upload the published artifact
      - uses: actions/upload-artifact@v3
        with:
          name: frontend-webapp
          path: ./app/frontend-webapp/dist

  # publish the dotnet app
  publish-monitor:
    needs: [init, publish-frontend-webapp]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # dotnet publish now we have dependencies
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.CI_dotnet-version }}

      - uses: actions/download-artifact@v3
        with:
          name: frontend-webapp
          path: ./app/frontend-webapp/dist

      - name: dotnet publish
        run: >-
          dotnet publish
          ${{ env.CI_app-project }}
          -c ${{ env.CI_build-config }}
          -o ${{ env.CI_publish-dir }}
          /p:GitHash=${{ github.sha }}

      # upload the published artifact
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ format('{0}-{1}_dotnet-{2}', env.CI_dotnet-output, needs.init.outputs.version, env.CI_dotnet-version) }}
          path: ${{ env.CI_publish-dir }}

  # Publish platform native EF Core migrations bundles
  publish-migrations:
    needs: [init, publish-monitor]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - artifact: win-x64
            file-extension: ".exe"
            args: >-
              -r win-x64
          - artifact: linux-x64

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.CI_dotnet-version }}
      - run: dotnet tool restore

      - run: >-
          dotnet ef migrations bundle
          -p ${{ env.CI_app-project }}
          -o ${{ format('{0}{1}', env.CI_migration-output-filename, matrix.file-extension) }}
          ${{ matrix.args }}
          --self-contained

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ format('migrations-{0}_{1}', needs.init.outputs.version, matrix.artifact) }}
          path: ${{ format('{0}{1}', env.CI_migration-output-filename, matrix.file-extension) }}